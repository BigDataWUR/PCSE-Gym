diff --git a/pcse/conf/Lintul3.conf b/pcse/conf/Lintul3.conf
index 9044c31..e38387b 100644
--- a/pcse/conf/Lintul3.conf
+++ b/pcse/conf/Lintul3.conf
@@ -21,10 +21,12 @@ AGROMANAGEMENT = AgroManager
 
 # variables to save at OUTPUT signals
 # Set to an empty list if you do not want any OUTPUT
-OUTPUT_VARS = ["DVS", "TGROWTH", "LAI", "NUPTT", "TRAN",
+OUTPUT_VARS = ["NNI", "NFGMR", "NRMR", "NOPTMR", "NUPTTr", "TNSOILr", "TGROWTHr","DVS", "TGROWTH", "LAI", "NUPTT", "TRAN",
                "TIRRIG", "TNSOIL", "TRAIN", "TRANRF", "TRUNOF", "TAGBM",
                "TTRAN", "WC", "WLVD", "WLVG", "WRT", "WSO", "WST"]
 
+#"NNI", "NFGMR", "NRMR", "NOPTMR", "NUPTTr", "TNSOILr", "TGROWTHr",
+
 # interval for OUTPUT signals, either "daily"|"dekadal"|"monthly"                                    
 # For daily output you change the number of days between successive
 # outputs using OUTPUT_INTERVAL_DAYS. For dekadal and monthly
diff --git a/pcse/crop/lintul3.py b/pcse/crop/lintul3.py
index f65034b..555fbd5 100644
--- a/pcse/crop/lintul3.py
+++ b/pcse/crop/lintul3.py
@@ -233,9 +233,21 @@ class Lintul3(SimulationObject):
         RNFST  = Float(-99)    # Residual N concentration in stem
         ROOTDM = Float(-99)    # Maximum root depth for a rice crop.
         RRDMAX = Float(-99)    # Maximum rate of increase in rooting depth (m d-1) for a rice crop.
+
+        # BEGIN REVISON Herman Berghuijs (December 18 2020)
+        # Parameter added in order to set the net mineralization rate (was hard coded)
+        RTMIN  = Float(-99)    # Net mineralization rate (g N m-2 soil)
+        # END REVISON Herman Berghuijs (December 18 2020)
+
         SLAC   = Float(-99)    # Specific leaf area constant.
         TBASE  = Float(-99)    # Base temperature for spring wheat crop.
         TCNT   = Float(-99)    # Time coefficient(days) for N translocation.
+
+        # BEGIN REVISON Herman Berghuijs (December 18 2020)
+        # Parameter added in order to set the net mineralization rate (was hard coded)
+        TNSOILI  = Float(-99)    # Net mineralization rate (g N m-2 soil)
+        # END REVISON Herman Berghuijs (December 18 2020)
+
         TRANCO = Float(-99)    # Transpiration constant (mm/day) indicating the level of drought tolerance of the wheat crop.
         TSUMAG = Float(-99)    # Temperature sum for ageing of leaves
         WCFC   = Float(-99)    # Water content at field capacity (0.03 MPa) m3/ m3
@@ -265,8 +277,11 @@ class Lintul3(SimulationObject):
         WRTLI  = Float(-99)   # Initial weight of roots
         WSOI   = Float(-99)   # Initial weight of storage organs
 
-        RNMIN = Float(-99)    # Rate of soil mineratilation (g N/m2/day
-        
+        # BEGIN REVISION Herman Berghuijs (January 15 2021)
+        # Parameter for translocation added
+        FRTRL = Float(-99)
+        # END REVISION Herman Berghuijs
+
     class Lintul3States(StateVariables):
         LAI = Float(-99.) # leaf area index
         ANLV = Float(-99.) # Actual N content in leaves
@@ -289,6 +304,17 @@ class Lintul3(SimulationObject):
         TAGBM = Float(-99.) # Total aboveground biomass [g /m-2)
         NNI = Float(-99) # Nitrogen nutrition index
 
+        NFGMR = Float(-99)
+        NRMR = Float(-99)
+        NOPTMR = Float(-99)
+        NUPTTr = Float(-99)
+        TNSOILr = Float(-99)
+        TGROWTHr = Float(-99)
+
+    # BEGIN REVISION Herman Berghuijs (December 23 2020)
+        NUPTAGB = Float(-99)
+    # END REVISION
+
     # These are some rates which are not directly connected to a state (PEVAP, TRAN) of which must be published
     # (RROOTD) for the water balance module. Therefore, we explicitly define them here.
     class Lintul3Rates(RatesTemplate):
@@ -334,6 +360,11 @@ class Lintul3(SimulationObject):
         # Initialize state variables
         init["LAI"] = self.LAII
         init["ANLV"] = self.ANLVI
+
+    	# BEGIN REVISION Herman Berghuijs (January 5 2020)
+        init["ANSO"] = self.ANSOI
+	# END REVISION
+
         init["ANST"] = self.ANSTI
         init["ANRT"] = self.ANRTI
         init["WLVG"] = p.WLVGI
@@ -342,6 +373,20 @@ class Lintul3(SimulationObject):
         init["WRT"] = p.WRTLI
         init["ROOTD"] = p.ROOTDI
 
+        # BEGIN REVISION Herman Berghuijs (December 23 2020)
+        init["NUPTAGB"] = self.ANLVI + self.ANSTI + self.ANSOI
+        # END REVISION
+
+        # BEGIN REVISION Herman Berghuijs (December 18 2020)
+        # Allows setting the initial nitrogen amount in the soil
+        init["TNSOIL"] = p.TNSOILI
+        # END REVISION Herman Berghuijs
+
+        # BEGIN REVISION Herman Berghuijs (December 18 2020)
+        # Allows setting the initial nitrogen amount in the soil
+        init["RTMIN"] = p.RTMIN
+        # END REVISION Herman Berghuijs
+
         # Initialize the states objects
         self.states = self.Lintul3States(kiosk, publish=["LAI", "ROOTD"], **init)
         # Initialize the associated rates of the states
@@ -633,10 +678,16 @@ class Lintul3(SimulationObject):
         by the crop, which is calculated as the minimum of the N supply from the soil
         and the N demand from the crop.
         """
+        # BEGIN REVISON Herman Berghuijs (December 18 2020)
+        # Parameter added in order to set the net mineralization rate (was hard coded)
+        #  Soil N supply (g N m-2 d-1) through mineralization.
+        # RTMIN = 0.10 * NLIMIT
+        # END REVISON Herman Berghuijs (December 18 2020)
 
         #  Change in inorganic N in soil as function of fertilizer
         #  input, soil N mineralization and crop uptake.
-        RNSOIL = self.FERTNS/DELT - NUPTR + p.RNMIN
+        #RNSOIL = self.FERTNS/DELT -NUPTR + RTMIN
+        RNSOIL = self.FERTNS/DELT - NUPTR + p.RTMIN
         self.FERTNS = 0.0
 
         # # Total leaf weight.
@@ -668,6 +719,14 @@ class Lintul3(SimulationObject):
         s.rCUMPAR = PAR
         s.rTNSOIL = RNSOIL
 
+        s.NNI = NNI
+        s.NFGMR = NFGMR
+        s.NRMR = NRMR
+        s.NOPTMR = NOPTMR
+        s.NUPTTr = NUPTR
+        s.TNSOILr = RNSOIL
+        s.TGROWTHr = RGROWTH
+
         if abs(NBALAN) > 0.0001:
             raise NutrientBalanceError("Nitrogen un-balance in crop model at day %s" % day)
         
@@ -693,6 +752,12 @@ class Lintul3(SimulationObject):
         # Compute some derived states
         s.TAGBM = s.WLVG + s.WLVD + s.WST + s.WSO
 
+        # REVISION Herman Berghuijs (December 23 2020)
+        p = self.params
+        #s.NUPTAGB = s.NUPTT - s.ANRT - s.NLOSSL - s.NLOSSR
+        s.NUPTAGB = s.ANLV + s.ANST + s.ANSO- s.NLOSSL
+        # END REVISION
+
     def _calc_potential_evapotranspiration(self, drv):
         """
         Potential evaporation and transpiration.
@@ -823,11 +888,37 @@ class Lintul3(SimulationObject):
         and storage organs.
         Obsolete subroutine name: RELGR                   
         """
-      
+
+
+        p = self.params
+        s = self.states
+
+        # BEGIN REVISION Herman Berghuijs (January 15 2021)
+        # Add translocation from the stems to the grains as a function of development rate
+        DVR = self.pheno.get_variable("DVR")
+        DVS = self.pheno.get_variable("DVS")
+
+        FRTRL = p.FRTRL
+
+        if(DVS <= p.DVSNT):
+            # There is no translocation of biomass from the stems to the storage organs,
+            # before the translocation of nitrogen to the storage organs starts
+            TRANSL = 0
+        else:
+            TRANSL = s.WST * DVR * FRTRL
+
+        # END REVISION Herman Berghuijs (January 15 2021)
+
         RWLVG = RGROWTH * FLV - DLV
         RWRT  = RGROWTH * FRT - DRRT
-        RWST  = RGROWTH * FST
-        RWSO  = RGROWTH * FSO
+
+        # BEGIN REVISION Herman Berghuijs (January 15 2021)
+        # Growth rate of stem and storage organs is extended with translocations.
+        # RWST  = RGROWTH * FST
+        # RWSO  = RGROWTH * FSO
+        RWST  = RGROWTH * FST - TRANSL
+        RWSO  = RGROWTH * FSO + TRANSL
+        # END REVISION Herman Berghuijs (Jaunary 15 2021)
 
         return RWLVG, RWRT, RWST, RWSO
 
diff --git a/pcse/soil/lintul3soil.py b/pcse/soil/lintul3soil.py
index bf545aa..baed371 100644
--- a/pcse/soil/lintul3soil.py
+++ b/pcse/soil/lintul3soil.py
@@ -7,6 +7,12 @@ from ..util import limit
 from math import sqrt
 from ..exceptions import WaterBalanceError
 
+# BEGIN Modfication Herman Berghuijs (March 2 2021)
+# Import of the signals module is added to allow irrigation specified by a user
+# in their agromanagement files
+from .. import signals
+# END Modification Herman Berghuijs
+
 cm2mm = lambda cm: 10. * cm
 m2mm = lambda x: 1000 * x
 
@@ -112,6 +118,11 @@ class Lintul3Soil(SimulationObject):
         WCSUBS  = Float(-99)    # water content subsoil (?)
         WCAD    = Float(-99)    # Water content at air dryness m3/ m3
         WCWP    = Float(-99)    # Soil hydraulic properties
+
+        # BEGIN Modification Herman Berghuijs (March 2 2021)
+        WMTAB   = Bool()
+        # END Modification Herman Berghuijs
+
         WMFAC   = Bool()        # water management (0=irrigated up to the field capacity, 1 = irrigated up to saturation)        
         ROOTDI  = Float(-99)    # initial rooting depth [m] 
 
@@ -131,6 +142,11 @@ class Lintul3Soil(SimulationObject):
     # Initial amount of water in upper layer (rooted zone)
     WAI = 0.
 
+    # BEGIN Modification Herman Berghuijs
+    # Added placeholder for the irrigation rate
+    _RIRR = Float(0.)
+    # END Modification Herman Berghuijs
+
     def initialize(self, day, kiosk, parvalues):
         """
         :param day: start date of the simulation
@@ -147,11 +163,17 @@ class Lintul3Soil(SimulationObject):
         # the calculations, based on the initial water content (in mm).
         self.WAI = m2mm(self.params.ROOTDI) * self.params.WCI
         init["WA"] = self.WAI
+
         
         # Initialize state variables
         self.states = self.Lintul3SoilStates(kiosk, publish=["WA", "WC"], **init)
         self.states.initialize_rates()
 
+        # BEGIN Modification Herman Berghuijs (March 2 2021)
+        # Added a connection between signals for irrigation and the lintul3 soil module.
+        self._connect_signal(self._on_IRRIGATE, signals.irrigate)
+        # END Modification Herman Berghuijs
+
     def _safe_get_from_kiosk(self, varname, default=0.0):
         """
         Get named value from the kiosk; return default if it isn't available
@@ -221,6 +243,7 @@ class Lintul3Soil(SimulationObject):
         """compute rates of drainage, runoff and irrigation
         """
         p = self.params
+        r = self.rates
 
         WAFC = p.WCFC * m2mm(ROOTD)
         WAST = p.WCST * m2mm(ROOTD)
@@ -228,7 +251,27 @@ class Lintul3Soil(SimulationObject):
         DRAIN = limit(0., p.DRATE, (WA-WAFC)/DELT + (RAIN - EVAP - TRAN))
         RUNOFF = max(0., (WA-WAST)/DELT + (RAIN - EVAP - TRAN - DRAIN))
         
-        if p.WMFAC:
+        # BEGIN Modification Herman Berghuijs (March 2 2021)
+        # Modification to allow irrigation from an irrigation table specified by the user.
+        # Get the irrigation rate _RIRR, store it in variable RIRR, and set the class variable
+        # _RIRR back to 0.
+        RIRR = self._RIRR
+        self._RIRR = 0
+        # END Modification Herman Berghuijs
+
+        # If irrigation is read from an agromanagement file, then calculate the rate of irrigation and
+        # the rate of runoff from this file.
+        if p.WMTAB:
+            DRAIN = limit(0., p.DRATE, (WA-WAFC)/DELT + (RIRR + RAIN - EVAP - TRAN))
+            # All water that cannot be removed by drainage or that cannot be stored in the soil either due to
+            # saturation, is removed by surface run-off.
+            RUNOFF = max(0., (WA-WAST)/DELT + (RIRR + RAIN - EVAP - TRAN - DRAIN))
+            IRRIG = min(RIRR, (WAST-WA)/DELT - (RAIN - EVAP - TRAN - DRAIN - RUNOFF))
+        # If changed in elif, because the original options will only be used if p.WMTAB = False.
+        #if p.WMFAC:
+        elif p.WMFAC:
+        # END Modification Herman Berghuijs
+
             # If a soil is irrigated by flooding, : soil water content is
             # kept at saturation via "irrigation events".
             IRRIG = max(0., (WAST-WA)/DELT - (RAIN - EVAP - TRAN - DRAIN - RUNOFF)) if p.IRRIGF else 0.0
@@ -236,7 +279,7 @@ class Lintul3Soil(SimulationObject):
             # If soil is irrigated but not flooded, : soil water content
             # is kept at field capacity via "irrigation events".
             IRRIG = max(0., (WAFC-WA)/DELT - (RAIN - EVAP - TRAN - DRAIN - RUNOFF)) if p.IRRIGF else 0.0
-    
+
         return DRAIN, RUNOFF, IRRIG
 
     def _soil_evaporation(self, RAIN, PEVAP, ROOTD, DELT):
@@ -267,5 +310,11 @@ class Lintul3Soil(SimulationObject):
         # air-dry. Limit the amount of evapotranspiration for this amount  
         # in order to avoid emptying the soil water reservoir below air-dry
         AVAILF = min(1., (s.WA - WAAD)/(EVS * DELT)) if (EVS > 0) else 0.0
-        
+
         return EVS * AVAILF
+
+    # BEGIN Modification Herman Berghuijs (March 2 2021)
+    # Added function to allow irrigation rate specified by user.
+    def _on_IRRIGATE(self, amount, efficiency):
+        self._RIRR = cm2mm(amount * efficiency)
+    # END Modification Herman Berghuijs (March 2 2021)
\ No newline at end of file
